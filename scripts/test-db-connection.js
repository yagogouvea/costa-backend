#!/usr/bin/env node

/**
 * Script para testar conex√£o com banco de dados
 * Execute: node scripts/test-db-connection.js
 */

import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const prisma = new PrismaClient();

async function testDatabaseConnection() {
  console.log('üîç Testando conex√£o com banco de dados...\n');
  
  // Verificar se DATABASE_URL est√° definida
  const databaseUrl = process.env.DATABASE_URL;
  if (!databaseUrl) {
    console.log('‚ùå DATABASE_URL n√£o est√° definida!');
    console.log('üí° Configure esta vari√°vel de ambiente primeiro.');
    process.exit(1);
  }
  
  // Verificar formato da URL
  if (!databaseUrl.startsWith('postgresql://') && !databaseUrl.startsWith('postgres://')) {
    console.log('‚ùå DATABASE_URL com formato inv√°lido!');
    console.log('   Deve come√ßar com "postgresql://" ou "postgres://"');
    console.log(`   Valor atual: ${databaseUrl}`);
    process.exit(1);
  }
  
  console.log('üìã Configura√ß√£o do banco:');
  console.log(`   URL: ${databaseUrl.substring(0, 50)}...`);
  console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'n√£o definido'}`);
  console.log(`   PORT: ${process.env.PORT || 'n√£o definido'}\n`);
  
  try {
    console.log('üîÑ Tentando conectar ao banco...');
    
    // Testar conex√£o
    await prisma.$connect();
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');
    
    // Testar query simples
    console.log('üîÑ Testando query simples...');
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ Query executada com sucesso:', result);
    
    // Verificar vers√£o do PostgreSQL
    console.log('üîÑ Verificando vers√£o do PostgreSQL...');
    const version = await prisma.$queryRaw`SELECT version()`;
    console.log('‚úÖ Vers√£o do PostgreSQL:', version[0].version);
    
    console.log('\nüéâ Banco de dados funcionando perfeitamente!');
    
  } catch (error) {
    console.log('‚ùå Erro ao conectar com o banco:');
    console.log(`   Tipo: ${error.constructor.name}`);
    console.log(`   Mensagem: ${error.message}`);
    
    if (error.code) {
      console.log(`   C√≥digo: ${error.code}`);
    }
    
    // Sugest√µes baseadas no erro
    if (error.message.includes("Can't reach database server")) {
      console.log('\nüí° Poss√≠veis solu√ß√µes:');
      console.log('   1. Verifique se o PostgreSQL est√° rodando');
      console.log('   2. Confirme se o host e porta est√£o corretos');
      console.log('   3. Verifique se n√£o h√° firewall bloqueando');
      console.log('   4. No Railway: confirme se o servi√ßo PostgreSQL foi criado');
    }
    
    if (error.message.includes("authentication failed")) {
      console.log('\nüí° Poss√≠veis solu√ß√µes:');
      console.log('   1. Verifique usu√°rio e senha');
      console.log('   2. Confirme se o usu√°rio tem permiss√£o de acesso');
      console.log('   3. Verifique se o banco existe');
    }
    
    if (error.message.includes("does not exist")) {
      console.log('\nüí° Poss√≠veis solu√ß√µes:');
      console.log('   1. Crie o banco de dados primeiro');
      console.log('   2. Verifique o nome do banco na URL');
      console.log('   3. Execute: CREATE DATABASE nome_do_banco;');
    }
    
    process.exit(1);
    
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå Conex√£o fechada.');
  }
}

// Executar teste
testDatabaseConnection().catch(console.error);
